#summary Assistance functions used by epiClock
#labels Phase-Design

= Introduction =
The following are the assistance functions used by epiClock. All listed functions are globally accessible, and *may conflict with some Javascript Frameworks*! If you are using a framework (like jQuery, prototype, mootools, etc), you may experience some conflicts with the "$" function.

|| *Function Name* || *Parameters* || *Description* ||
|| ck || `(mixed Check, [ string Against ])` || Checks the type of provided variable (Check) against the provided type (Against). If you supply no _Against_ parameter, the function will compare to "undefined". ||
|| calc || `(int Seconds, int Per, int Cap)` || Computes time components from calculated offset seconds. This function is necessary to calculate the correct time after comparing two unix timestamps. ||
|| tock || `(int Integer)` || Cosmetic formatting for all time components. If the integer provided is less than 10, an extra 0 will be prepended to make it a 2 character digit. ||
|| flip || NONE || Shortcut function for creating a flip clock. Contains all the code for a [dev_obj_face Face Object] image flip clock. ||
|| $ || `([string ElementID|object HTMLElement, [ ... ]])` || Fetches any number of HTMLElements from the document from the provided IDs/DomObject. ||
|| `_` || `([string ElementType|object HTMLElement, [string innerHTML|object settings, [string innerHTML|object appendChild, [string innerHTML|object appendChild, [... ]]]]])` || Creates/styles/fills HTMLElements and returns them. ||
|| qup || `([string EventQueueType ])` || Sets up an event queue for certain window events (page load, dom load, etc). Any event you can set `(window.onload = function);` can be set through the queue, to allow multiple actions to be added. ||

= Examples =
The following are examples of using the helper functions.

== ck ==
{{{
var arr = {};				// Set variable as literal object
var isstring = ck(arr, 'string');	// false
var isobject = ck(arr, 'object');	// true
var isset = ck(arr);			// true
}}}

== calc ==
{{{
/* Assume the variable "seconds" has been set elsewhere */

var hours = calc(seconds, 3600, 24);	// The number of hours
var mins = calc(seconds, 60, 60);	// The number of minutes
var secs = calc(seconds, 60, 1);	// The number of seconds
}}}
	
== tock ==
{{{
var none = tock(0);			// 00
var small = tock(3);			// 03
var medium = tock(13);			// 13
var large = tock(313);			// 313
}}}

== flip ==
{{{
epiClock.set('id', {
	face: new face({dir: 'epiClock/flip', ext: 'gif', pre: ['s','d','df'], type: 'img'})
});					// Normal way to create a flip clock

/* CAN BE REPLACED WITH */

epiClock.set('id', {face: new flip()});	// Shortcut way. Same result as above.
}}}

== $ ==
{{{
/* Assume the following from the HTML document: 
<div id="first">Content</div><div id="second"><span id="nest">Text!</span></div>
*/
var nest = document.getElementById('nest');
var elements = $('first','second',nest);

elements[0].innerHTML;			// "Content"
elements[1].children;			// HTMLSpanElement
elements[2].innerHTML;			// "Text!"
}}}

== `_` ==
{{{
var newDiv = _('div', 			// Create a new div
	{id: 'newdiv', 			// Set it's id
		style: {		// Style the element
		background: 'blue', color: black}, 
	className: 'div_new'}, 		// Set the class
	'New Text!',			// Add this text
	_(),				// Providing no params makes a <br/>
	'More text!',			// Add text below the <br/>
	_('p', 				// Create a <p/> tag and nest text
		'Nested Tag with Nested Text!')	
);
document.body.appendChild(newDiv);
/** This is equivalent to:

<body>
<div id="newdiv" class="div_new" style="background: blue; color: black;">
	New Text!<br/>More Text!
	<p>Nested Tag with Nested Text!</p>
</div>
</body>

*/
}}}

== qup ==
{{{
function one(){ alert('I am here'); }
function two(){ alert('The page is loaded'); }
function three() { alert('The dom is loaded'); }
var pload = new qup();			// On Page Load event (default)
var dload = new qup('OnDomReady');	// On Dom Read event

pload.add(one,two);			// When page loads, will call one(), then two()
dload.add(three);			// When dom is ready, will call three()

dload.fire();				// You can call the event manually two by invoking the fire() method

}}}


= Source Code =
{{{
function ck(k, p) {
	return p ? typeof k == p : typeof k != 'undefined';
}

function calc(secs, num1, num2) {
	return ((Math.floor(secs/num1))%num2);
}

function tock(stin){
	if (stin < 0) return '00';
	
	var digit = stin.toString();
	return (digit.length < 2 ? '0'+digit : digit);
}

function flip(){
	return new face({dir: 'epiClock/flip', ext: 'gif', pre: ['s','d','df'], type: 'img'});
}

// Irae Header
function qup() {
	var me = this;
	var on = arguments[0] || 'onload';
	me.func = [];
	me.add = function (){
		var a = arguments;
		for (i=0;i<a.length;++i) if (typeof a[i] == 'function') me.func.push(a[i]);
	}
	me.fire = function (){
		for (f in me.func) me.func[f]();
	}
	me.event = function (event){
		window[event] = me.fire;
	}
	me.event(on);
}

function $(){
	var elem = [];
	var a = arguments;
	for (i=0;i<a.length;++i){ 
		var e = a[i]; 
		elem.push(typeof e == 'string' ? document.getElementById(e) : e);
	}
	return (elem.length == 1 ? elem[0] : elem);
}

function _(){
	var a = arguments;
	var l = a.length;
	var t = a[0] || 'br';
	var e = (typeof t != 'obj' ? document.createElement(t) : t);
	if (l <= 1) return e;
	var o = a[1];
	switch (typeof o){
		case 'string': e.innerHTML = o; break;
		case 'object': for (k in o){ 
			if (typeof o[k] == 'object') for (y in o[k]) e[k][y] = o[k][y];
			else e[k] = o[k];
		} break;
	}
	if (l == 2) return e;
	for (var x = 2; x < l; ++x)
		switch (typeof a[x]){
			case 'string': e.innerHTML += a[x]; break;
			case 'object': e.appendChild(a[x]); break;
		}
	return e;
}

var onl = new qup();
}}}

